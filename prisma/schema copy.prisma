// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  email          String   @unique
  nombreCompleto String?
  apellidos      String?
  clave          String?
  rol            Role     @default(USER)
  empresaId      Int?
  empresa        Empresa? @relation(fields: [empresaId], references: [idEmpresa])
}

//****************************************

model Empresa {
  idEmpresa        Int         @id @default(autoincrement())
  nombreEmpresa    String
  direccion        String
  emailcorporativo String?
  telefono         String?
  iva              String?
  nit              String?
  createdAt        DateTime    @default(now())
  usuarios         Usuario[] // Relación con usuarios
  productos        Producto[] // Relación con productos
  compras          Compra[] //relacion con compras
  ventas           Venta[] //relacion con ventas
  proveedores      Proveedor[] //relacion con proveedores
  clientes         Cliente[] //relacion con clientes
}

enum Role {
  SUPERADMIN // rol solo para el dueño de todo el sistema
  USER
  ADMIN
}

model Cliente {
  idCliente     Int      @id @default(autoincrement())
  fechaRegistro DateTime @default(now())
  nombre        String
  telefono      String?
  direccion     String?
  email         String
  ventas        Venta[]
  empresaId     Int? //para saber a que empresa pertenece
  Empresa       Empresa? @relation(fields: [empresaId], references: [idEmpresa])
}

model Producto {
  id          Int             @id @default(autoincrement())
  nombre      String
  precio      Float
  existencias Int
  createdAt   DateTime        @default(now())
  empresaId   Int //Para saber a que empresa pertenece
  empresa     Empresa         @relation(fields: [empresaId], references: [idEmpresa])
  ventas      VentaDetalle[]
  compras     CompraDetalle[]
}

model Venta {
  id        Int            @id @default(autoincrement())
  tipoVenta Int            @default(1) // para saber si sera cf ccf exportacion, etc
  fecha     DateTime       @default(now())
  total     Float
  detalles  VentaDetalle[]
  empresaId Int //Para saber a que empresa pertenece
  clienteId Int //para saber a que cliente
  Empresa   Empresa        @relation(fields: [empresaId], references: [idEmpresa])
  Cliente   Cliente        @relation(fields: [clienteId], references: [idCliente])
}

model VentaDetalle {
  id         Int      @id @default(autoincrement())
  cantidad   Int
  precio     Float
  productoId Int
  ventaId    Int
  producto   Producto @relation(fields: [productoId], references: [id])
  venta      Venta    @relation(fields: [ventaId], references: [id])
}

model Proveedor {
  id            Int      @id @default(autoincrement())
  fechaRegistro DateTime @default(now())
  nombre        String
  email         String
  telefono      String
  direccion     String
  iva           String?
  nit           String?
  empresaId     Int? //Para saber a que empresa pertenece
  Empresa       Empresa? @relation(fields: [empresaId], references: [idEmpresa])
  compras       Compra[]
}

model Compra {
  id            Int             @id @default(autoincrement())
  fecha         DateTime        @default(now())
  total         Float
  iva           Float
  numeroFactura Int
  empresaId     Int //Para saber a que empresa pertenece
  proveedorId   Int //Para saber a que proveedor ha comprado
  Empresa       Empresa         @relation(fields: [empresaId], references: [idEmpresa])
  Proveedor     Proveedor       @relation(fields: [proveedorId], references: [id])
  detalles      CompraDetalle[]
}

model CompraDetalle {
  id         Int      @id @default(autoincrement())
  cantidad   Int
  precio     Float
  productoId Int
  compraId   Int
  producto   Producto @relation(fields: [productoId], references: [id])
  compra     Compra   @relation(fields: [compraId], references: [id])
}
